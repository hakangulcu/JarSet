%option yylineno
digit 			[0-9]
positive_digit		[1-9]
sign			[+-]
assignment_operator	=
number			{digit}*
int 			{sign}?{number}
float 			{int}"."{number}
at 			@
left_parantheses	"("
right_parantheses	")"
left_curly_bracket	"{"
right_curly_bracket 	"}"
comma 			","
colon                   ":"
comment_symbol		\/\/
lowercase_letter	[a-z]
uppercase_letter	[A-Z]
non_digit_character	{letter}|@
character		{digit}|{non_digit_character}
string			\"[^\"]*\"
comment                 \/\/[^\/]*\/\/
letter 			{lowercase_letter}|{uppercase_letter}
identifier		{letter}|{letter}{character}*
boolean			"true"|"false"	
null			"NONE"
set_identifier		"#"
set_element		\'{identifier}\'|\'{int}\'
function_operator 	"->"
end 			";"	
and			"&"
or			"|"
is_equal		"=="
not_equal		"!="
smaller_than		"<"
greater_than		">"
smaller_than_or_equal	"<="
greater_than_or_equal	">="
set_intersection	"&=&"
set_union		"+=+"
set_difference		"-=-"
set_complement		"!=!"
set_cartesian		"X=X"
create_set_keyword	"createSet"
delete_set_keyword	"deleteSet"
subset			"<<"
superset		">>"
subset_or_equal		"<<=="
superset_or_equal	">>=="
set_cardinality_keyword	"getSetSize"
set_empty_keyword	"isEmpty"
set_has_keyword		"setHas"
set_singleton_keyword	"isSingleton"
set_powerset_keyword	"getPowerset"
set_retrieve_keyword	"retrieve"
set_remove_keyword	"remove"
set_add_keyword		"add"
printSet		"printSet"
enterSet		"enterSet"
fReadSet		"fReadSet"
fWriteSet		"fWriteSet"
for			"for"
while			"while"
if			"if"
else			"else"
program			"program"
main			"main"
print			"print"
return			"return"
define 			"define"
stop			"stop"
continue		"continue"
printf			"printf"
%%
{print}			return (PRINT);
{printf}		return (PRINTF);
{printSet}		return (PRINTSET);
{continue}		return (CONTINUE);
{stop}			return (STOP);
{define}		return (FUNCTION_DEFINE);
{function_operator} 	return(FUNCTION_OPERATOR);
{set_identifier}	return(SET_IDENTIFIER);
{set_element}		return(SET_ELEMENT);
{int}			return(INT);
{float}		return(FLOAT);
{string}		return(STRING);
{at}			return(AT);
{colon}                 return(COLON);
{assignment_operator}	return(ASSIGNMENT_OPERATOR);
{left_parantheses}	return(LP);
{right_parantheses}	return(RP);
{left_curly_bracket}	return(LCB);
{right_curly_bracket}	return(RCB);
{comma}			return(COMMA);
{boolean}		return(BOOLEAN);
{null}			return(NONE);
{end}			return(END);
{and}			return(AND);
{or}			return(OR);
{is_equal}		return(IS_EQUAL);
{not_equal}		return(NOT_EQUAL);
{smaller_than}		return(SMALLER_THAN);
{greater_than}		return(GREATER_THAN);
{smaller_than_or_equal}	return(SMALLER_THAN_OR_EQUAL);
{greater_than_or_equal}	return(GREATER_THAN_OR_EQUAL);
{set_intersection}	return(SET_INTERSECTION);
{set_union}		return(SET_UNION);
{set_difference}	return(SET_DIFFERENCE);
{set_complement}	return(SET_COMPLEMENT);
{set_cartesian}		return(SET_CARTESIAN);
{create_set_keyword}	return(CREATE_SET);
{delete_set_keyword}	return(DELETE_SET);
{subset}		return(SUBSET);
{superset}		return(SUPERSET);
{subset_or_equal}	return(SUBSET_OR_EQUAL);
{superset_or_equal}	return(SUPERSET_OR_EQUAL);
{set_cardinality_keyword} return(SET_CARDINALITY);
{set_empty_keyword}	return(SET_EMPTY);
{set_has_keyword}	return(SET_HAS);
{set_singleton_keyword}	return(SET_SINGLETON);
{set_powerset_keyword}	return(SET_POWERSET);
{set_retrieve_keyword}	return(SET_RETRIEVE);
{set_remove_keyword}	return(SET_REMOVE);
{set_add_keyword}	return(SET_ADD);
{fReadSet}		return(FREADSET);
{fWriteSet}		return(FWRITESET);
{enterSet}		return(ENTERSET);
{for}			return(FOR);
{while}			return(WHILE);
{if}			return(IF);
{else}			return(ELSE);
{program}		return(PROGRAM);
{main}			return(MAIN);
{return}		return(RETURN);
{identifier}		return(IDENTIFIER);
{comment}               return(COMMENT);
{set_identifier}{identifier} return(SET);
\n 				{extern int lineno;lineno++;
				}
%%
int yywrap() { return 1;}
